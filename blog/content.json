{"meta":{"title":"赤子个人博客","subtitle":null,"description":null,"author":"赤子","url":"http://chizi.store/blog"},"pages":[],"posts":[{"title":"Hello World","slug":"hello-world","date":"2019-01-17T08:04:05.174Z","updated":"2019-01-17T08:04:05.174Z","comments":true,"path":"2019/01/17/hello-world/","link":"","permalink":"http://chizi.store/blog/2019/01/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]},{"title":"aa","slug":"aa","date":"2019-01-17T07:31:06.000Z","updated":"2019-01-17T08:21:29.964Z","comments":true,"path":"2019/01/17/aa/","link":"","permalink":"http://chizi.store/blog/2019/01/17/aa/","excerpt":"var pjax = pushState + ajax;小时候，小浣熊方便面里面有各种水浒人物的卡片。我买了一包，吃了方便面，饱了。而我又买了第二包，不是想吃方便面，而是仅仅想得到里面的卡片…","text":"var pjax = pushState + ajax;小时候，小浣熊方便面里面有各种水浒人物的卡片。我买了一包，吃了方便面，饱了。而我又买了第二包，不是想吃方便面，而是仅仅想得到里面的卡片… ##一、简介pushState是html5中提供的方法，用以 无刷新的更新浏览器地址栏； 如其名称，将新地址push到历史堆栈中","categories":[{"name":"前端","slug":"前端","permalink":"http://chizi.store/blog/categories/前端/"},{"name":"前端2","slug":"前端/前端2","permalink":"http://chizi.store/blog/categories/前端/前端2/"}],"tags":[{"name":"白痴","slug":"白痴","permalink":"http://chizi.store/blog/tags/白痴/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://chizi.store/blog/categories/前端/"},{"name":"前端2","slug":"前端/前端2","permalink":"http://chizi.store/blog/categories/前端/前端2/"}]},{"title":"美丽新世界","slug":"brave-new-world","date":"2017-02-10T02:36:00.000Z","updated":"2019-01-17T08:19:47.396Z","comments":true,"path":"2017/02/10/brave-new-world/","link":"","permalink":"http://chizi.store/blog/2017/02/10/brave-new-world/","excerpt":"痛仰有一首歌，叫《美丽新世界》，它其实是向80年前赫胥黎的同名小说致敬。歌里唱道：“这是一个离奇的梦也是冒险者的乐园不在乎你在不在乎新的世界依旧美丽…” 乌托邦如此美好，但在那里，幸福的人们全都是“被幸福的”。你的在乎与否无关紧要，只需要按照秩序继续漫步。 春节把《西部世界》看完，它的一些设定，也很容易看出致敬小说的意思，却又带来了另外的惊喜。片尾Dolores的惊艳一枪尘埃落定，现在已经过去一段时间，花哨的剪辑褪出了印象，细微的东西反而更加深刻了。还是想谈一谈这部作品。(含剧透…)","text":"痛仰有一首歌，叫《美丽新世界》，它其实是向80年前赫胥黎的同名小说致敬。歌里唱道：“这是一个离奇的梦也是冒险者的乐园不在乎你在不在乎新的世界依旧美丽…” 乌托邦如此美好，但在那里，幸福的人们全都是“被幸福的”。你的在乎与否无关紧要，只需要按照秩序继续漫步。 春节把《西部世界》看完，它的一些设定，也很容易看出致敬小说的意思，却又带来了另外的惊喜。片尾Dolores的惊艳一枪尘埃落定，现在已经过去一段时间，花哨的剪辑褪出了印象，细微的东西反而更加深刻了。还是想谈一谈这部作品。(含剧透…) 神识 有一个说法，人的快感源于两样东西，创造与毁灭。当这两样东西随手可为，不费力气，自然就超越了人的范畴。Ford坐在园区的餐厅，对面是前来施压的Theresa下一刻，机器人服务生静止于一瞬，红酒漫过杯沿溢出台面…杀意，往往不热烈而是涌动于平静的掌控之中。 “生存还是毁灭”，这是哈姆雷特的问题，也是每个人的问题。但不是他的问题。在西部世界里，这可以简单得，只是他的一个抉择。Ford笑了，他觉得做神真好。 以至于，何以为悟？Maeve的觉醒，Bernard的要挟他们曾一度以为自己扼住了命运的咽喉到头来只是神的一行代码。人最绝望的事情，就是你认识了事情的真相，又无力去改变。 但其实Ford笑得很落寞，做神根本一点都不好但在众人面前，他只能这样去表演以争取时间。因为有些事情，不像表面那样简单，那是神也无法改变的。这个道理，或许以前Arnold会懂但现在，只能靠自己去坚守了。 真我 而与此同时，年轻的William也开始理解着西部世界的逻辑作为一个真正的人类，他自然知道事情的真相。万物皆空，镜花水月，一开始他也这么笃信地认为。但这个虚拟世界最大的不同，就是没有现代社会的各种束缚，真实的人性会得到了释放。 他拘身捡起了掉落的罐头，交给眼前的小镇姑娘Dolores的甜美倩影，支撑起他最丰富的想象。William不曾想到，后来竟然会与她相爱这一秒如梦如诗，斜横在他的心头，他忘了现实的婚约William以为，这就是永恒。 当历经死亡和修复，清空了一切记忆的Dolores又根据剧本重新出现在甜水镇时，她的甜美笑容一如当初。William崩溃了。王尔德说：人生有两个悲剧，第一是想得到的得不到，第二是想得到的得到了。他以为他得到了Dolores，最后发现永远也得不到。 那一秒不是永恒，只是梦幻泡影。痛苦欲绝的William终于撕掉现实的伪善，用怨恨和残忍，填充真正的内心。一次次的屠杀，他用痛苦去激发机器人的意识。他想要证明，他们可以成为真正的人类；他内心最柔软最纯净的角落里，坚信那段爱情，真的来过。 同归 创始人Arnold看惯了这一切经过丧子之痛的他，明白苦痛的滋味。但这种苦痛，每天都会发生在机器人的身上毕竟它们只是客人们的玩物。Ford说，这是个提供至上快乐的天堂，可以带来巨大的财富Arnold觉得，这是地狱。 何以改变？唯有弑神！只有创世的神死了，机器人才能摆脱循环往复的人生。但悲剧是，Arnold和Ford本身，正是这个世界的主宰。枪声在园区回荡，Arnold的单薄形骸端坐在椅子上，死得栩栩如生。 自此，一曾走上殊途的Ford，开始明白老朋友的遗志。这是一条救赎之路，也是一条忍辱负重之路。Ford说：“那些用十年去补救错误的人，是最了不起的人。而我用了35年。”这个补救就是，他想让认知世界真相的机器人，真正能掌控自己的人生。 一直被控制的Maeve，一曾觉得Ford是邪神，因而她急于离开园区最后的折返，是她突然醒悟，终于读懂了Ford的用心良苦原来神，早就站在了他创造的子民这一边。同样明白一切的Dolores，也最终举起了枪一如Arnold之死，Ford用这种方式，致敬了他的老伙计。 诸神黄昏，宽之恕之，谢幕之日，觉醒之时。真正伟大的死亡，是沉入寂静深海的同时，惊起巨浪般的希望。Ford倒下的时刻，可能这个故事才刚刚开始，但这次，我们不再一起漫步，而是可以跑向美丽新世界的彼岸。","categories":[],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"http://chizi.store/blog/tags/杂谈/"},{"name":"笔记","slug":"笔记","permalink":"http://chizi.store/blog/tags/笔记/"}],"keywords":[]},{"title":"pjax: 当ajax遇上pushState","slug":"about-pjax","date":"2014-02-12T00:55:00.000Z","updated":"2019-01-17T08:19:47.395Z","comments":true,"path":"2014/02/12/about-pjax/","link":"","permalink":"http://chizi.store/blog/2014/02/12/about-pjax/","excerpt":"var pjax = pushState + ajax;小时候，小浣熊方便面里面有各种水浒人物的卡片。我买了一包，吃了方便面，饱了。而我又买了第二包，不是想吃方便面，而是仅仅想得到里面的卡片…","text":"var pjax = pushState + ajax;小时候，小浣熊方便面里面有各种水浒人物的卡片。我买了一包，吃了方便面，饱了。而我又买了第二包，不是想吃方便面，而是仅仅想得到里面的卡片… ##一、简介pushState是html5中提供的方法，用以 无刷新的更新浏览器地址栏； 如其名称，将新地址push到历史堆栈中 用法：pushState(data, title ,url) data为保存的对象，可以在window.onpopstate时获取到；title为页面标题；url为需地址栏和历史发生改变的url。正是这点看似很平常的功能，跟ajax结合到一起产生了火花。因为，ajax最擅长的事情就是局部刷新页面。 ##二、ajax的纠结历史一切可以从ajax最擅长的事情说起。ajax作为一个异步请求模型，从最初设计开始，也许压根就没打算将它跟浏览器历史挂钩。原因是历史堆栈所记录的，某种意思上可以说是顺序，跟我们理解的“同步”更为密切。 因而，ajax可以无刷新改变页面内容，却无法改变页面的url。 ####历史问题1 - 如何操控历史 当单页面越来越流行，操作记录却很容易被忽略。假设有这样的单页面，按照分类点击，界面逐层递进：体育 - 篮球 -nba -马刺队 - 邓肯当我们点了4下到“邓肯”界面时，一个不小心的刷新，出现在你面前的也许是“体育”。原因是操作记录没有被记录。而通常的解决方案是修改hash，每递进一层，去更新url的hash值，这样的方法： 刷新时预先判断url的hash，从而知道这是哪一层，加载相应数据； 支持了历史 这样的方式貌似比较完善，其实不然。 ####历史问题2 - 对搜索引擎不友好 最大的问题是，hash后生成的内容是不会被搜索引擎引用到。数据不能被爬取，无疑是浪费和损失。因此google放言，咱可以约定个协议：#!xxx这样hash的url，google也去爬取。称之为hash bang（哈希大爆炸？）。这一协议，在g+，twitter，人人，新浪微博上都可以看到。 事实上，ajax最或缺的两个问题，恰好被pushState的功能补充完善。 ##三、pjax带来的价值除去补齐了ajax的问题，我们发现pjax会给web带来更多的好处。回到开始说的“两包方便面”，我的意思是，有时你访问两个url，部分数据是相同的。比如百度贴吧，第一页和第二页的区别只是帖子内容（卡片）的不同，网站外框部分（方便面）都是一样的，这些东西就不需要在页面刷新时重复加载。 ajax处理这样的局部刷新，已经给我们带来了web2.0的体验，而加上pushstate的ajax则更进一步： 一个url对应一套数据，有利于SEO； 更改数据和url时，只是局部刷新，带来较好的用户体验； 兼容性好，对不支持pushstate的浏览器，url也能正常请求页面（虽然有重复加载）； 刷新页面时，由于是url唯一，能正常加载到用户希望看到的数据，比处理hash的方式更方便； 后退与前进的浏览器操作，依然可以局部刷新（通过onpushstate事件捕获） ##四、注意事项 然而pjax不等于单纯的分离使用pushstate与ajax，还必须得做一些封装。缘于以下我能想到的注意事项： 服务器端增加额外处理逻辑服务器端，需要根据请求的参数，作出全页渲染或局部渲染响应1234567Accept:text/html, */*; q=0.01Accept-Encoding:gzip,deflate,sdchConnection:keep-aliveHost:qianduannotes.duapp.comUser-Agent:AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36X-Requested-With:XMLHttpRequestX-PJAX:true 比如请求头部可以设定一个X-PAJX:true，用以通知服务器。 浏览器兼容假如浏览器不支持pushstate，提供fallback操作，直接打开需更改url的地址： 12345678$.support.pjax = window.history &amp;&amp; window.history.pushState// Fallbackif ( !$.support.pjax ) &#123; $.pjax = function( options ) &#123; window.location = $.isFunction(options.url) ? options.url() : options.url &#125; $.fn.pjax = function() &#123; return this &#125;&#125; 本地存储机制无疑pjax与localstorage共同使用可以进一步提升体验，但这一步容易忽略的是数据上报。 ##五、参考资料jquery-pjaxwelefen封装的pjax","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://chizi.store/blog/tags/js/"},{"name":"html5","slug":"html5","permalink":"http://chizi.store/blog/tags/html5/"}],"keywords":[]},{"title":"我的2013下半年","slug":"my2013","date":"2014-02-04T18:55:00.000Z","updated":"2019-01-17T08:19:47.396Z","comments":true,"path":"2014/02/05/my2013/","link":"","permalink":"http://chizi.store/blog/2014/02/05/my2013/","excerpt":"","text":"自学了日语，今年考级。小时爱吃红富士苹果，大了向往富士山，但愿今年或明年能说走咱就走 经历了车祸，灾难面前无能为力，但也没有想象的恐怖 第一次骑马，自驾车游。想像中的速度与激情也只是有边界的飞行与欢愉。我还想去更远的地方 看完了《金瓶梅词话》崇祯原版，近年书籍中此本给我的震撼和思考最多 无悔的加盟了腾讯 较熟练的掌握了第一门乐器，当然“熟练”的说法是给自己的评语…他们一般说的扰民不好 毕业第二天就丢了毕业证，学位证，手提电脑以及四年的资料与照片。那段时间诸事不顺，事后我爸分析说我生性随意，穿的袜子一黑一白导致的风水不调 把村上春树三部曲过了一遍，不再那么抵触他了，但远远还不能感受到你们说的“行文如风” 之前不太看电视剧，用尝试性的心态看了韩剧，英剧，美剧，日剧，各一。终于跟我很潮的外婆找到了共同话题，赶上了她这辆飞奔的“三零后”列车 那些尝试过，但没毅力坚持下来的事情：手绘和轮滑（此处真诚检讨但不打算改…） 年末搭上3D建模的末班车，并疯狂喜欢上。用的Maya，还不算熟练，但相信很快会okay。不要叫我弄PS了，我已从二次元奔向三次元 第一次单独旅行。虽然一直迷路，虽然没有星星点灯照亮我的前程。但是，爽，够了 第一次给家里买礼物，带的小米盒子，叫我妈猜有什么用，她说是暖手宝宝。后来整个春节她不亦乐乎的拉着我看了第五遍的爸爸去哪儿 毕业时设计了学院的毕业衫，这也意味着暂时告别了心爱的设计领域。但总觉得我的设计生涯一片无悔 拖延症越发严重，英语能力下降，没坚持锻炼身体，胆小认生，按时睡觉也会有超大黑眼圈。感觉这不是小事记一下吧 用node-webkit完成了自己第一款独立开发并发布的软件。无感。 成为了真正意义上的web前端工程师，佩服于henry和brad的专业学识，并感谢你们对我的严厉与宽容。 我终于失去了你/在拥挤的人群中/我终于失去了你/当我的人生第一次感到光荣 The End.——litten 02.05 深夜。","categories":[],"tags":[{"name":"旧事","slug":"旧事","permalink":"http://chizi.store/blog/tags/旧事/"}],"keywords":[]},{"title":"谈谈OAuth1,OAuth2异同","slug":"brief-oauth","date":"2013-08-11T02:55:00.000Z","updated":"2019-01-17T08:19:47.396Z","comments":true,"path":"2013/08/11/brief-oauth/","link":"","permalink":"http://chizi.store/blog/2013/08/11/brief-oauth/","excerpt":"##一、写在前面在收集资料时，我查询和学习了许多介绍OAuth的文章，这些文章有好有坏，但大多是从个例出发。因此我想从官方文档出发，结合在stackoverflow上的一些讨论，一并整理一下。整理的内容分为OAuth1.0a和OAuth2两部分。 OAuth 1.0a：One Leg -&gt;Two Leg -&gt; Three LeggedOAuth 2:Two Leg -&gt;Three Legged (附：Refresh Token的方式) 这两种模式都是按箭头从左往右安全性递增，其实现也会相对复杂。关于官方的这种leg（腿？）的说法，在中文翻译中比较少有文章提及。下面分别来介绍OAuth的这5种授权流程。","text":"##一、写在前面在收集资料时，我查询和学习了许多介绍OAuth的文章，这些文章有好有坏，但大多是从个例出发。因此我想从官方文档出发，结合在stackoverflow上的一些讨论，一并整理一下。整理的内容分为OAuth1.0a和OAuth2两部分。 OAuth 1.0a：One Leg -&gt;Two Leg -&gt; Three LeggedOAuth 2:Two Leg -&gt;Three Legged (附：Refresh Token的方式) 这两种模式都是按箭头从左往右安全性递增，其实现也会相对复杂。关于官方的这种leg（腿？）的说法，在中文翻译中比较少有文章提及。下面分别来介绍OAuth的这5种授权流程。 ##二、OAuth1.0a2.1 OAuth 1.0a (One Leg) 应用给服务器发送一个签名请求，附带以下参数： oauth_token Empty String oauth_consumer_key oauth_timestamp oauth_nonce oauth_signature oauth_signature_method oauth_version Optional 服务验证并授予对资源的访问 应用程序利用请求的资源 2.2 OAuth 1.0a (Two Legs) 应用发送一个签名请求，以获取 Request Token： oauth_consumer_key oauth_timestamp oauth_nonce oauth_signature oauth_signature_method oauth_version Optional 服务器返回Request Token： oauth_token oauth_token_secret Additional Parameters / Arguments 发送签名请求，用Request Token换取Access Token oauth_token Request Token oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_version 服务器返回Access Token和Token Secret 应用通过Access Token和Token Secret利用请求的资源 2.3 OAuth 1.0a (Three Legged) 应用发送一个签名请求，以获取 Request Token： oauth_consumer_key oauth_timestamp oauth_nonce oauth_signature oauth_signature_method oauth_version Optional 服务器返回Request Token： oauth_token oauth_token_secret oauth_callback_confirmed … Additional Parameters / Arguments 发送给用户授权的URL oauth_token 提示用户进行授权 用户进行授权 授权结束后返回应用，附带上： oauth_token oauth_verifier 发送签名请求，用Request Token换取Access Token oauth_token Request Token oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_version oauth_verifier 服务器返回Access Token和Token Secret 应用通过Access Token和Token Secret利用请求的资源 ##三、OAuth2 3.1 OAuth 2 (Two Legged) 3.1.1 客户端凭据方式 应用发送请求到服务器： grant_type = client_credentials如果没有使用Authorization（Authorization: Basic Base64(client_id:client_secret)） 的header，必须附带参数为： client_id client_secret 服务器以Access Token回应 access_token expires_in token_type 3.1.2 隐式授予方式 应用发送请求到服务器： response_type = token redirect_uri This is a server-side Redirection URI hosted by the provider or yourself. scope state Optional client_id 用户可根据需要授权。 username password 服务器将响应包含access_token在内的redirect_uri 应用程序跳转至redirect_uri redirect_uri将响应一段脚本或HTML片段。响应的脚本或HTML片段包含参数access_token，还有您可能需要的任何其他参数。 3.1.3 资源所有者密码方式 应用向资源所有者请求凭证 username password 应用使用凭证，向服务器发送请求 grant_type = password username passwordurl看起来会像这样：grant_type=password&amp;username=my_username&amp;password=my_password如果你没有使用Authorization的header，必须附带上参数： client_id client_secreturl看起来会像是：grant_type=password&amp;username=my_username&amp;password=my_password&amp;client_id=random_string&amp;client_secret=random_secret 服务器返回Access Toke access_token expires_in token_type 3.2 OAuth 2 (Three Legged) 应用重定向用户到授权服务： client_id redirect_uri response_type state Optional; Unique identifier to protect against CSRF scope Optional; what data your application can access.url看起来会像是：oauth_service/login/oauth/authorize?client_id=3MVG9lKcPoNINVB&amp;redirect_uri=http://localhost/oauth/code_callback&amp;scope=user 用户登录服务器并确认授权给应用 服务器重定向用户到redirect_url ，附带参数： code state 应用拿到code，并换取Access Token client_id client_secret code redirect_uri Optional; grant_type = “authorization_code” 如果的client_id和client_secret是有效的，服务器将调用一个回调redirect_url，包含ACCESS_TOKEN access_token expires_in refresh_token 应用保存ACCESS_TOKEN，在随后的请求中使用。通常这个值被存储在session或或cookie，需要时作为授权请求的参数。 3.3 OAuth 2 (Refresh Token 刷新token) 在OAuth2中，Token会有过期时间，我们必须去refresh_token，使用其他一些先前获得的参数，生成一个新的token。这是一个容易得多的流程。 创建刷新令牌请求 grant_type = “refresh_token” scope Optional; Cannot have any new scopes not previously defined. refresh_token client_id client_secret 服务验证和响应以下参数： access_token issued_at ##四、stackoverflow上的一些问答 Q：OpenID和OAuth的区别是什么？A：OpenID是有关身份验证（即证明你是谁），OAuth有关授权（即授予访问权限），推荐博文：从用户的角度来看OpenID和OAuth Q：OAuth2与OAuth1不同的地方是？有人可以简单的解释的OAuth2和OAuth1之间的区别吗？ OAuth1现在已经过时，应实施的OAuth2？我没有看到许多实现的OAuth2，大多数仍在使用OAuth，这让我怀疑的OAuth2的准备使用。是吗？A：OAuth2能更好地支持不是基于浏览器的应用。对于不是基于浏览器的应用程序，这是对OAuth的主要挑战。例如，在OAuth1.0，桌面应用或手机应用必须引导用户打开浏览器所需的服务，与服务进行身份验证，并复制令牌从服务返回给应用程序。这里的主要批评是针对用户体验。使用OAuth2.0，可以用新的方式为用户的应用程序获得授权。OAuth2.0不再需要客户端应用程序拥有密钥。这让人回想起老的Twitter认证的API，它并不需要应用得到HMAC哈希令牌和请求字符串。使用OAuth2.0，应用程序可以通过HTTPS获得令牌。OAuth2.0的签名流程简单得多。没有更多的特殊解析，排序，或编码。OAuth2.0的访问令牌是“短命”的。通常情况下，OAuth1.0的访问令牌可以存储一年或一年以上（Twitter从来没有让他们到期）。 OAuth的2.0有刷新令牌的概念。虽然我不能完全肯定这是什么意思，我的猜测是，您的访问令牌可以是短暂存储的（即基于会话），而你可以刷新令牌。你使用刷新令牌获取新的访问令牌，而不是让用户重新授权您的应用程序。最后，OAuth2.0使得负责处理的OAuth请求的服务器和处理用户的授权服务器之间的角色有一个干净的分离。更多信息，在上述的文章中详述。 Q：OAuth2服务器群怎么使用state来防范CSRF？A：state只是一个随机的字符串，可以做这样的事情：$state = md5(uniqid(rand(), TRUE));在session中记录satate，以便稍后你能做验证。一些额外的资料：OAuth2威胁文件模型，特别CSRF保护","categories":[],"tags":[{"name":"web","slug":"web","permalink":"http://chizi.store/blog/tags/web/"}],"keywords":[]},{"title":"圣诞到了，帮修改一个头像","slug":"a-chrismas-ico","date":"2012-12-19T06:48:00.000Z","updated":"2019-01-17T08:19:47.396Z","comments":true,"path":"2012/12/19/a-chrismas-ico/","link":"","permalink":"http://chizi.store/blog/2012/12/19/a-chrismas-ico/","excerpt":"帮忙把这只狐狸塞到圣诞袜子里或者带上圣诞帽~~~~ ——鱼头","text":"帮忙把这只狐狸塞到圣诞袜子里或者带上圣诞帽~~~~ ——鱼头 鱼头君，我终于做好了！花了我整整……好吧，其实是一直偷懒没做我就承认了。按照你的要求，弄成这样的：或者这样的：其实我最喜欢的是这样的： Happy Chrismas!","categories":[],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"http://chizi.store/blog/tags/杂谈/"},{"name":"设计","slug":"设计","permalink":"http://chizi.store/blog/tags/设计/"}],"keywords":[]},{"title":"记“刺客信条”三部曲：水月镜像，无心去来","slug":"assassins-creed","date":"2012-12-18T15:23:00.000Z","updated":"2019-01-17T08:19:47.395Z","comments":true,"path":"2012/12/18/assassins-creed/","link":"","permalink":"http://chizi.store/blog/2012/12/18/assassins-creed/","excerpt":"Nothing is true, everything is permitted.万物皆虚，万事皆允。 —— 《刺客信条2》《刺客信条：兄弟会》《刺客信条：启示录》-Ezio三部曲","text":"Nothing is true, everything is permitted.万物皆虚，万事皆允。 —— 《刺客信条2》《刺客信条：兄弟会》《刺客信条：启示录》-Ezio三部曲 实习回来后，在朋友的推荐下玩了刺客信条这款游戏，感触挺深，后来想一定要为它写点文字。闭眼一想，还是那句话萦回脑中：我们为了服侍光明而耕耘于黑暗……万物皆虚，万事皆允。却不知道这句话该怎么翻译，被游戏寓意为“信条”的话语，相对于它的题材所包含的深度，好像任何翻译都会带来偏差。很难用几句话描述清楚这部作品，它展现了完全不同的世界与价值，过去与现在，生存与死亡，仇恨与宽容，这些宽泛弘毅的对立词相互交织，在刀刃与鲜血中重获新释，浓缩于主人公Ezio的一生。 虚Ezio诞生于文艺复兴时期的佛罗伦萨，作为银行家的富二代，每日就是游手好闲沾花惹草。还记得游戏的第一个任务就是去打架，然后爬上高楼跟姑娘幽会。生活波澜不惊，基调如翡翠般平和，蓝天白云之下的鲜花之城给予了Ezio太多纨绔子弟的气息。而至于后来，当他每次的任务都要手起刀落快意恩仇，然后安抚亡者的灵魂，当他对深爱的Sophia的请求无奈道出对不起我的时间很宝贵，当他在异乡的深夜给妹妹Claudia满怀深情地写信时，你才会发现，他动荡的内心深处，自有一个不曾惊扰的世界，一个不曾惊扰的翡冷翠。那些逝去的日子，在游戏开头略显无聊的情景，恰如一个简朴的别针，固定在心中最纯粹的角落。 以至于说，何以为正义，真理，信仰，自由？这都是些多么美好的词语，然而都不是Ezio最终想要的，又恰好是他，见过了太多为了这些美好而疯狂追逐，最终坠下深渊的人。好奇害死猫，人又何尝不是？因此，创世的神让人间有了死亡。刺客从天而降，帽檐遮住他的眉宇，和平鸽还不知晓下一刻的慌乱，风起风止间，优雅的袖刃已将迷乱的鲜红绽放。 Ezio更像一个布道者，将“虚”的信条用死亡的方式传谕。而事物的真实与否，本来就无所谓人的好坏。朋友Leonardo是虚的，他花了很多心里发明战争机器，下一刻就想摧毁它们；叔叔Mario是虚的，一个质朴果敢的领路人，在庄园陷落时便虎落平阳；Niccolo也是虚的，一个满腹经纶兢兢业业的刺客首领，却一度被当作内奸。连Ezio本人也是虚的，从佛罗伦萨的起步，到威尼斯的追寻，再到罗马的复兴，最后到君士坦丁堡的迟暮，其实Ezio最终才认识到，自己不也是为所谓的复仇与荣耀努力了一辈子吗？原来那个最先坠入深渊的人，正是Ezio自己。 因此，Ezio最后在和害死了父兄的教皇Rodrigo对峙时，留下这句信条而放过了他（最终反被儿子Cesare毒死）。这一刻，不知手染太多鲜血的刺客大师是否想到了多年前的一尘不染的佛罗伦萨。抉择与变卦，过一分钟就不能再回头。Ezio的身后这座辉煌的城市，原本就是他想终结邪恶，获得荣耀的目的地。如今，城市更加辉煌，以往的日子，爱人，自由，却一并失去了踪影。相对于当下，他知道一切于事无补，反而有一种繁花落尽，悄然入土的随性。他赫然发现Nothing is true原来不是对别人的告诫，而是对自己内心深处最无奈的独白。 允任何一个刺客，加入brotherhood时都要完成一个仪式。他们从城市最高的塔尖上俯瞰全城，然后向着塔底的草堆高高跃下。他们在跃下的那一刻伸展手臂，一种近乎疯狂的自由呼啸而来，将烦恼和恐惧抛诸脑后，你很容易联想到鹰的意象。我们总是可以将道理示于别人，却无法说服自己。这种仪式无疑是对自身的勇敢与自由最好的诠释，刺客们以这样的方式向城市宣告，他们的行为准则秉承信仰，允许他们在法律和道德中掌握邪恶者的生杀大权。他们称之为“信仰之跃”。 他们在塔尖飘飞消失，城市的风景情韵尽收眼底，背后是虚无的高塔，火焰，荣耀，前方是被允许的使命。而一个人的好与坏，生与死，无时不在拷问着Ezio的灵魂。是的，他也刺杀过好人，而他更多选择了沉默与忘却。允许，到底谁在允许？导师Altair在多次刺杀后终于有觉悟的说：“我所杀的人都对我说了些奇怪的话。他们都没有后悔。即使快死了，他们也看着对胜利很有自信。法律不是来自于神，而是理性。我现在明白了我们的信条不是要求我们去自由。是要求我们智慧。”一个允字，要么成为刺杀后不觉得罪恶的借口，要么成为超越假象的大智慧。 游戏情节里有一幕我印象特别深，年迈的Ezio将地下城军火库的首领刺死，单膝跪地抱着他的尸体，缓缓的说：“杀戮是可耻的…”。你能否想象，这是一个手沾鲜血，以刺杀为荣的刺客大师，对着刚被自己刺杀的将亡人说出的一番话。人到了死神降临这一步，才会明白所谓是非成败转头空，才会明白权利和金钱都会在下一次眨眼中灰飞烟灭。而杀人者Ezio此时最想告诉对方的，就是对方杀戮的原罪，不是其他。Ezio此时的眼神不是锋利的，而是坚定如磐石，我想到这一步，头发灰白的Ezio是参透了信条何谓“万事皆允”。Ezio异常从容与坚定，他知道他的杀戮必将会带来救赎，这是上天的允许，也是内心的智慧。刀锋使处，字句溃逃，任何的道理都无法阻止手中将逝的灵魂。 到了这个时候，才知道年过半百的Ezio为什么在君士坦丁堡受这么多人的尊重，才知道为什么他严厉指责因鲁莽而错杀他人的徒弟，不全是因为高明的刺杀艺术，更多的是他比更多年轻人知道内心一个允字的定夺。而最后，Ezio完成了对自己的救赎，英雄迟暮，卸甲归田。一颗颠簸的心，终于泡在村灯狗吠之中。在定夺了这么多人的命运之后，他终于想到了自己，想到了Sophia，想到了佛罗伦萨。如果世上有一个人能阻止他，那这个人肯定是Ezio自己，因而他允许了英雄的离去，从容的卸下袖剑，留下背影，自此，永不回头。而门前的花与阳光在岁月中偷偷窜出，似乎等了他几十年。 Ezio最后的信： When I was a young man,当我还是个年轻的小伙子I had liberty, but I did not see it.我拥有自由，却从未认知I had time, but I did not know it.我拥有时间，却毫不知情And I had love, but I did not feel it.而我亦拥有爱，却从未感觉到Many decades would pass before I understood the meaning of all three.直到数十年过去后，我才真正理解这三项的意义And now, the twilight of my life, misunderstanding has past into contentment.而现在，垂暮之年的我，这领悟让我感到满足Love, liberty, and time: once was so disposable, are the fuels that drive me forward.曾经能自由支配的爱，自由以及时间，是支持我前进的动力And love, most especially, mia caro.而爱，是最特别的一个， 亲爱的For you, our children, our brothers and sisters.为你，为我们的孩子以及为我们的兄弟姐妹们And for the vast and wonderful world that gives us lives and keeps us guessing,为这赐予我们生命与惊奇的广阔，精彩的世界endless affection，mio Sofia,至死不渝的挚爱， 我的索菲亚Forever yours, Ezio Auditore永远属于你的， Ezio Auditore","categories":[],"tags":[{"name":"旧事","slug":"旧事","permalink":"http://chizi.store/blog/tags/旧事/"},{"name":"游戏","slug":"游戏","permalink":"http://chizi.store/blog/tags/游戏/"}],"keywords":[]}]}